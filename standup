#!/bin/python

import argparse
import datetime
import os
import calendar
from pathlib import Path
from datetime import date, timedelta
import markdown
from mdx_gfm import GithubFlavoredMarkdownExtension
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

# Requirements:
# - py-gfm      (pip install py-gfm)

# Usage
# - todo -l ~/Dropbox/todo -e code open
# - todo -l ~/Dropbox/todo report

css = """
body {
  font-family: Helvetica, arial, sans-serif;
  font-size: 14px;
  line-height: 1.6;
  padding-top: 10px;
  padding-bottom: 10px;
  background-color: white;
  padding: 30px;
  color: #333;
}

body > *:first-child {
  margin-top: 0 !important;
}

body > *:last-child {
  margin-bottom: 0 !important;
}

a {
  color: #4183C4;
  text-decoration: none;
}

a.absent {
  color: #cc0000;
}

a.anchor {
  display: block;
  padding-left: 30px;
  margin-left: -30px;
  cursor: pointer;
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
}

h1, h2, h3, h4, h5, h6 {
  margin: 20px 0 10px;
  padding: 0;
  font-weight: bold;
  -webkit-font-smoothing: antialiased;
  cursor: text;
  position: relative;
}

h2:first-child, h1:first-child, h1:first-child + h2, h3:first-child, h4:first-child, h5:first-child, h6:first-child {
  margin-top: 0;
  padding-top: 0;
}

h1:hover a.anchor, h2:hover a.anchor, h3:hover a.anchor, h4:hover a.anchor, h5:hover a.anchor, h6:hover a.anchor {
  text-decoration: none;
}

h1 tt, h1 code {
  font-size: inherit;
}

h2 tt, h2 code {
  font-size: inherit;
}

h3 tt, h3 code {
  font-size: inherit;
}

h4 tt, h4 code {
  font-size: inherit;
}

h5 tt, h5 code {
  font-size: inherit;
}

h6 tt, h6 code {
  font-size: inherit;
}

h1 {
  font-size: 28px;
  color: black;
}

h2 {
  font-size: 24px;
  border-bottom: 1px solid #cccccc;
  color: black;
}

h3 {
  font-size: 18px;
}

h4 {
  font-size: 16px;
}

h5 {
  font-size: 14px;
}

h6 {
  color: #777777;
  font-size: 14px;
}

p, blockquote, ul, ol, dl, li, table, pre {
  margin: 15px 0;
}

hr {
  border: 0 none;
  color: #cccccc;
  height: 4px;
  padding: 0;
}

body > h2:first-child {
  margin-top: 0;
  padding-top: 0;
}

body > h1:first-child {
  margin-top: 0;
  padding-top: 0;
}

body > h1:first-child + h2 {
  margin-top: 0;
  padding-top: 0;
}

body > h3:first-child, body > h4:first-child, body > h5:first-child, body > h6:first-child {
  margin-top: 0;
  padding-top: 0;
}

a:first-child h1, a:first-child h2, a:first-child h3, a:first-child h4, a:first-child h5, a:first-child h6 {
  margin-top: 0;
  padding-top: 0;
}

h1 p, h2 p, h3 p, h4 p, h5 p, h6 p {
  margin-top: 0;
}

li p.first {
  display: inline-block;
}

ul, ol {
  padding-left: 30px;
}

ul :first-child, ol :first-child {
  margin-top: 0;
}

ul :last-child, ol :last-child {
  margin-bottom: 0;
}

dl {
  padding: 0;
}

dl dt {
  font-size: 14px;
  font-weight: bold;
  font-style: italic;
  padding: 0;
  margin: 15px 0 5px;
}

dl dt:first-child {
  padding: 0;
}

dl dt > :first-child {
  margin-top: 0;
}

dl dt > :last-child {
  margin-bottom: 0;
}

dl dd {
  margin: 0 0 15px;
  padding: 0 15px;
}

dl dd > :first-child {
  margin-top: 0;
}

dl dd > :last-child {
  margin-bottom: 0;
}

blockquote {
  border-left: 4px solid #dddddd;
  padding: 0 15px;
  color: #777777;
}

blockquote > :first-child {
  margin-top: 0;
}

blockquote > :last-child {
  margin-bottom: 0;
}

table {
  padding: 0;
}
table tr {
  border-top: 1px solid #cccccc;
  background-color: white;
  margin: 0;
  padding: 0;
}

table tr:nth-child(2n) {
  background-color: #f8f8f8;
}

table tr th {
  font-weight: bold;
  border: 1px solid #cccccc;
  text-align: left;
  margin: 0;
  padding: 6px 13px;
}

table tr td {
  border: 1px solid #cccccc;
  text-align: left;
  margin: 0;
  padding: 6px 13px;
}

table tr th :first-child, table tr td :first-child {
  margin-top: 0;
}

table tr th :last-child, table tr td :last-child {
  margin-bottom: 0;
}

img {
  max-width: 100%;
}

span.frame {
  display: block;
  overflow: hidden;
}

span.frame > span {
  border: 1px solid #dddddd;
  display: block;
  float: left;
  overflow: hidden;
  margin: 13px 0 0;
  padding: 7px;
  width: auto;
}

span.frame span img {
  display: block;
  float: left;
}

span.frame span span {
  clear: both;
  color: #333333;
  display: block;
  padding: 5px 0 0;
}

span.align-center {
  display: block;
  overflow: hidden;
  clear: both;
}

span.align-center > span {
  display: block;
  overflow: hidden;
  margin: 13px auto 0;
  text-align: center;
}

span.align-center span img {
  margin: 0 auto;
  text-align: center;
}

span.align-right {
  display: block;
  overflow: hidden;
  clear: both;
}

span.align-right > span {
  display: block;
  overflow: hidden;
  margin: 13px 0 0;
  text-align: right;
}

span.align-right span img {
  margin: 0;
  text-align: right;
}

span.float-left {
  display: block;
  margin-right: 13px;
  overflow: hidden;
  float: left;
}

span.float-left span {
  margin: 13px 0 0;
}

span.float-right {
  display: block;
  margin-left: 13px;
  overflow: hidden;
  float: right;
}

span.float-right > span {
  display: block;
  overflow: hidden;
  margin: 13px auto 0;
  text-align: right;
}

code, tt {
  margin: 0 2px;
  padding: 0 5px;
  white-space: nowrap;
  border: 1px solid #eaeaea;
  background-color: #f8f8f8;
  border-radius: 3px;
}

pre code {
  margin: 0;
  padding: 0;
  white-space: pre;
  border: none;
  background: transparent;
}

.highlight pre {
  background-color: #f8f8f8;
  border: 1px solid #cccccc;
  font-size: 13px;
  line-height: 19px;
  overflow: auto;
  padding: 6px 10px;
  border-radius: 3px;
}

pre {
  background-color: #f8f8f8;
  border: 1px solid #cccccc;
  font-size: 13px;
  line-height: 19px;
  overflow: auto;
  padding: 6px 10px;
  border-radius: 3px;
}

pre code, pre tt {
  background-color: transparent;
  border: none;
}
"""


def configure_parser():
    parser = argparse.ArgumentParser(prog='standup',
                                    usage='%(prog)s -l <location> [options]',
                                    description='Keep track of tasks per day for standup purposes')
    subparsers = parser.add_subparsers(dest='command')
    open_cmd = subparsers.add_parser('open', help='Open file for today')
    open_cmd.add_argument('-l', help='Location to store files', required=True)
    open_cmd.add_argument("-e", help='Editor to use to edit file')
    report_cmd = subparsers.add_parser('report', help='Generate report for yesterday and today')
    report_cmd.add_argument('-l', help='Location to store files', required=True)
    report_cmd.add_argument('-s', help='SMTP Server hostname', required=True)
    report_cmd.add_argument('-p', help='SMTP Server port', required=True)
    report_cmd.add_argument('-u', help='SMTP Server username', required=True)
    report_cmd.add_argument('-w', help='SMTP Server password', required=True)
    report_cmd.add_argument('-f', help='From Address', required=True)
    report_cmd.add_argument('-t', help='To Address', required=True)
    return parser

def two_char(n):
    s = str(n)
    if len(s) == 1:
        return '0' + s
    else:
        return s

def get_day_file(location, year, month, day):
    month_str = two_char(month)
    day_str = two_char(day)
    dest = "{0}/{1}/{2}".format (location, year, month_str)
    Path(dest).mkdir(parents=True, exist_ok=True)
    filename = "%s_%s_%s.md" % (str(year), month_str, day_str)
    return '{0}/{1}'.format(dest, filename)

def write_file(fname, content):
    with open(fname, 'w') as writer:
        writer.write(content)

def open_file(location, editor):
    today = date.today()
    year = today.year
    month = today.month
    day = today.day
    filename = get_day_file(location, year, month, day)
    header = today.strftime('# %A, %d %B %Y \r\r- [ ] ')

    if editor == None:
        editor = 'code'

    if not os.path.exists(filename):
        with open(filename, 'w+') as writer:
            writer.write(header)

    cmd = "%s %s" % (editor, filename)
    os.system(cmd)
    print('Started editor')

def render_md(filename):
    with open(filename, 'r') as reader:
        content = reader.read()
    return markdown.markdown(content, extensions=[GithubFlavoredMarkdownExtension()])

def generate(location, host, port, username, password, from_addr, to_addr):
    today = date.today()
    yesterday = today - timedelta(1)

    yes_md = ''
    today_md = ''

    yes_file = get_day_file(location, yesterday.year, yesterday.month, yesterday.day)
    if os.path.exists(yes_file):
        yes_md = render_md(yes_file)
    
    today_file = get_day_file(location, today.year, today.month, today.day)
    if os.path.exists(today_file):
        today_md = render_md(today_file)

    message = """
    <html>
        <head>
            <style>
            {0}
            </style>
        </head>
        <body>
        {1}
        <hl/>
        {2}
        </body>
    <html>
    """.format(css, yes_md, today_md)

    msg = MIMEMultipart()
    msg.add_header('Content-Type','text/html')
    msg['From']=from_addr
    msg['To']=to_addr
    msg['Subject']=today.strftime('%A, %d %B %Y Standup Report')
    msg.attach(MIMEText(message, 'text/html'))
    msg.set_payload(message)

    s = smtplib.SMTP(host, port)
    s.starttls()
    s.login(username, password)
    s.sendmail(msg['From'], [msg['To']], msg.as_string())
    s.quit()

def main():
    arg = configure_parser().parse_args()

    if not hasattr(arg, 'command'):
        print('Please specify command')
        return
    
    if arg.command == 'open':
        open_file(arg.l, arg.e)
    elif arg.command == 'report':
        generate(arg.l, arg.s, arg.p, arg.u, arg.w, arg.f, arg.t)


if __name__ == "__main__":
    main()